{"version":3,"sources":["components/UsersList.js","components/ButtonFetchUsers.js","components/App.js","serviceWorker.js","index.js"],"names":["UsersList","props","users","map","user","react_default","a","createElement","key","login","uuid","src","picture","large","alt","name","last","concat","title","email","className","ButtonFetchUsers","style","border","backgroundColor","padding","margin","fontWeight","cursor","display","onClick","click","API","App","state","handleDataFetch","fetch","then","res","ok","Error","json","data","results","_this","setState","prevState","catch","err","console","log","this","components_ButtonFetchUsers","length","src_components_UsersList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAkBeA,eAhBG,SAACC,GACf,IAAMC,EAAQD,EAAMC,MAAMC,IAAK,SAAAC,GAAI,OAC/BC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAKK,MAAMC,MACjBL,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAKQ,QAAQC,MAAOC,IAAKV,EAAKW,KAAKC,OAC9CX,EAAAC,EAAAC,cAAA,aAAAU,OAAQb,EAAKW,KAAKG,MAAlB,KAAAD,OAA2Bb,EAAKW,KAAKC,OACrCX,EAAAC,EAAAC,cAAA,SAAIH,EAAKe,UAIhB,OACAd,EAAAC,EAAAC,cAAA,OAAKa,UAAU,SACXlB,KCKOmB,EAjBU,SAAApB,GACrB,OAEII,EAAAC,EAAAC,cAAA,UACAe,MAAS,CACJC,OAAQ,kBACRC,gBAAiB,QACjBC,QAAS,GACTC,OAAQ,YACRC,WAAY,OACZC,OAAQ,UACRC,QAAS,SAEdC,QAAS7B,EAAM8B,OAVf,2BCCFC,EAAM,uCAqCGC,6MAjCbC,MAAQ,CACLhC,MAAO,MAGViC,gBAAkB,WAChBC,MAAMJ,GACLK,KAAK,SAAAC,GACJ,GAAGA,EAAIC,GACL,OAAOD,EAET,MAAM,IAAIE,MAAM,uBAEjBH,KAAK,SAAAC,GAAG,OAAIA,EAAIG,SAChBJ,KAAK,SAAAK,GACF,IAAMxC,EAAQwC,EAAKC,QACnBC,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1B5C,MAAO4C,EAAU5C,MAAMe,OAAOf,QAGrC6C,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,8EAIxB,IAAM9C,EAAQiD,KAAKjB,MAAMhC,MACzB,OACCG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6C,EAAD,CAAkBrB,MAAOoB,KAAKhB,kBAC7BjC,EAAMmD,OAAO,EAAIhD,EAAAC,EAAAC,cAAC+C,EAAD,CAAWpD,MAAOA,IAAYA,UA7BrCqD,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.d0a5a846.chunk.js","sourcesContent":["import React from 'react';\r\nimport './UsersList.css';\r\nconst UsersList = (props) => {\r\n    const users = props.users.map( user => (\r\n        <div key={user.login.uuid}>\r\n            <img src={user.picture.large} alt={user.name.last} />\r\n           <h4>{`${user.name.title} ${user.name.last}`}</h4>\r\n           <p>{user.email}</p>\r\n       </div>\r\n    ))\r\n    \r\n    return ( \r\n    <div className=\"users\">\r\n       {users}\r\n    </div>\r\n     );\r\n}\r\n \r\nexport default UsersList;","import React from 'react';\r\nconst ButtonFetchUsers = props => {\r\n    return ( \r\n      \r\n        <button \r\n        style = {{\r\n             border: 'solid 2px black',\r\n             backgroundColor: 'white',\r\n             padding: 20,\r\n             margin: '30px auto',\r\n             fontWeight: 'bold',\r\n             cursor: 'pointer',\r\n             display: 'block'  \r\n        }} \r\n        onClick={props.click}>Dodaj użytkownika</button> \r\n     );\r\n}\r\n \r\nexport default ButtonFetchUsers;","import React, { Component } from 'react';\nimport './App.css';\nimport UsersList from './UsersList';\nimport ButtonFetchUsers from './ButtonFetchUsers';\n\nconst API = 'https://randomuser.me/api/?results=1';\n\nclass App extends Component {\n\n  state = {\n     users: []\n  }\n\n  handleDataFetch = () => {\n    fetch(API)\n    .then(res => {\n      if(res.ok){\n        return res\n      }\n      throw new Error(\"Błąd!!!\")\n    })\n    .then(res => res.json())\n    .then(data => {\n        const users = data.results;\n        this.setState(prevState => ({\n          users: prevState.users.concat(users)\n        }))\n  })\n  .catch(err => console.log(err))\n}\n\n  render() {\n    const users = this.state.users;\n    return (\n     <div>\n       <ButtonFetchUsers click={this.handleDataFetch}/>\n       {users.length>0 ? <UsersList users={users} /> : users}\n     </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}